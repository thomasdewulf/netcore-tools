name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: actions/setup-java@v1
        with:
          java-version: '11' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64  

      - name: Use GitVersion
          id: gitversion # step id used as reference for output values
          uses: gittools/actions/gitversion/execute@v0.9
            - run: |
                echo "Major: ${{ steps.gitversion.outputs.major }}"
                echo "Minor: ${{ steps.gitversion.outputs.minor }}"
                echo "Patch: ${{ steps.gitversion.outputs.patch }}"
                echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
                echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
                echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
                echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
                echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
                echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
                echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
                echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
                echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
                echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
                echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
                echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
                echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
                echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
                echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
                echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
                echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
                echo "Sha: ${{ steps.gitversion.outputs.sha }}"
                echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
                echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
                echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
                echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
                echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
                echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
                echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
                echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
                echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
      
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9
        with:
          versionSpec: '5.1.x'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Prepare SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"thomasdewulf_netcore-tools" /o:"thomasdewulf" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="/**/coverage.opencover.xml" 
      - name: Build
        shell: powershell
        run: dotnet build --configuration Release
      - name: Test
        shell: powershell
        run: dotnet test --collect "XPlat Code Coverage" --settings "ThomasDeWulf.Tools.Tests/runsettings.xml"

      - name: Publish SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
